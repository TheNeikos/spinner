var searchIndex = {};
searchIndex['spinner'] = {"items":[[0,"","spinner","This library is useful for console applications with long running processes.\nYou create a `Spinner` and then update it however you see fit. Since this\nhappens asynchronously, your user will not be left in the dark about what\nyour app is doing.",null,null],[3,"SpinnerHandle","","A handle to the Spinner Thread.",null,null],[3,"SpinnerBuilder","","The struct with which to create a Spinner, check out the crate documentation\nfor some more details",null,null],[0,"menu","","Module defining the menu part of this crate",null,null],[3,"MenuOption","spinner::menu","An individual MenuOption, check out the crate documentation on how to use it",null,null],[3,"Menu","","A menu that has not yet been displayed",null,null],[4,"MenuType","","An enum specifying the type of information the user should put in.",null,null],[13,"Text","","Input should be type Text",0,null],[13,"Integer","","Input should be type Integer",0,null],[13,"Float","","Input should be type Float",0,null],[4,"MenuValue","","The value of the given menu, when given as an argument to the constructor\nthis will be used as the default value. When returned after displaying\nthe menu it will contain the information input by the user.",null,null],[13,"Text","","The value of a Text MenuOption",1,null],[13,"Integer","","The value of an Integer MenuOption",1,null],[13,"Float","","The value of a Float MenuOption",1,null],[11,"fmt","","",0,{"inputs":[{"name":"menutype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"menutype"}],"output":{"name":"menutype"}}],[11,"eq","","",0,{"inputs":[{"name":"menutype"},{"name":"menutype"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"menutype"},{"name":"menutype"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"menuvalue"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"menuvalue"}],"output":{"name":"menuvalue"}}],[11,"fmt","","",1,{"inputs":[{"name":"menuvalue"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"menuoption"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"menuoption"}],"output":{"name":"menuoption"}}],[11,"get_string","","Get the string if there is one, will panic if MenuType is not a string",2,{"inputs":[{"name":"menuoption"}],"output":{"name":"option"}}],[11,"get_int","","Get the integer if there is one, will panic if MenuType is not an\ninteger",2,{"inputs":[{"name":"menuoption"}],"output":{"name":"option"}}],[11,"get_float","","Get the float if there is one, will panic if MenuType is not a float",2,{"inputs":[{"name":"menuoption"}],"output":{"name":"option"}}],[11,"fmt","","",3,{"inputs":[{"name":"menu"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"menu"}],"output":{"name":"menu"}}],[11,"new","","Construct a new menu using the given MenuOptions",3,{"inputs":[{"name":"menu"},{"name":"vec"}],"output":{"name":"self"}}],[11,"display","","Consume the menu and return a Vector of MenuOptions with the new values\ninserted.",3,{"inputs":[{"name":"menu"}],"output":{"name":"vec"}}],[7,"DANCING_KIRBY","spinner","A possible string for the spinner, check out the kirby example for a\npossible use case.",null,null],[11,"update","","Update the message that is given to the user as part of the spinner",4,{"inputs":[{"name":"spinnerhandle"},{"name":"string"}],"output":{"name":"option"}}],[11,"message","","Print out a message above the Spinner for the user.",4,{"inputs":[{"name":"spinnerhandle"},{"name":"string"}],"output":{"name":"option"}}],[11,"close","","Shutdown the thread and wait until it has joined.",4,{"inputs":[{"name":"spinnerhandle"}],"output":null}],[11,"new","","Create a SpinnerBuilder, giving an original message",5,{"inputs":[{"name":"spinnerbuilder"},{"name":"string"}],"output":{"name":"self"}}],[11,"spinner","","Customize the vector that can be used for the spinner, you can google\nsomething like 'ascii spinner' for some fun examples. Note though that\nyou should make sure they all have the same length. And only one line.",5,{"inputs":[{"name":"spinnerbuilder"},{"name":"vec"}],"output":{"name":"self"}}],[11,"step","","Customize the step between each update of the text. The default is 200ms",5,{"inputs":[{"name":"spinnerbuilder"},{"name":"duration"}],"output":{"name":"self"}}],[11,"format","","Set the format closure that is to be used by the spinner, check out\nthe complex_spinner example how this could be used.",5,{"inputs":[{"name":"spinnerbuilder"},{"name":"f"}],"output":{"name":"self"}}],[11,"start","","Start the thread that takes care of the Spinner and return immediately\nallowing you to load or do otherwise operations.",5,{"inputs":[{"name":"spinnerbuilder"}],"output":{"name":"spinnerhandle"}}]],"paths":[[4,"MenuType"],[4,"MenuValue"],[3,"MenuOption"],[3,"Menu"],[3,"SpinnerHandle"],[3,"SpinnerBuilder"]]};
searchIndex['term'] = {"items":[[0,"","term","Terminal formatting library.",null,null],[4,"Attr","","Terminal attributes for use with term.attr().",null,null],[13,"Bold","","Bold (or possibly bright) mode",0,null],[13,"Dim","","Dim mode, also called faint or half-bright. Often not supported",0,null],[13,"Italic","","Italics mode. Often not supported",0,null],[13,"Underline","","Underline mode",0,null],[13,"Blink","","Blink mode",0,null],[13,"Standout","","Standout mode. Often implemented as Reverse, sometimes coupled with Bold",0,null],[13,"Reverse","","Reverse mode, inverts the foreground and background colors",0,null],[13,"Secure","","Secure mode, also called invis mode. Hides the printed text",0,null],[13,"ForegroundColor","","Convenience attribute to set the foreground color",0,null],[13,"BackgroundColor","","Convenience attribute to set the background color",0,null],[5,"stdout","","Return a Terminal wrapping stdout, or None if a terminal couldn't be\nopened.",null,{"inputs":[],"output":{"name":"option"}}],[5,"stderr","","Return a Terminal wrapping stderr, or None if a terminal couldn't be\nopened.",null,{"inputs":[],"output":{"name":"option"}}],[0,"terminfo","","Terminfo database interface.",null,null],[3,"TermInfo","term::terminfo","A parsed terminfo database entry.",null,null],[12,"names","","Names for the terminal",1,null],[12,"bools","","Map of capability name to boolean value",1,null],[12,"numbers","","Map of capability name to numeric value",1,null],[12,"strings","","Map of capability name to raw (unexpanded) string",1,null],[3,"TerminfoTerminal","","A Terminal that knows how many colors it supports, with a reference to its\nparsed Terminfo database record.",null,null],[4,"Error","","A terminfo creation error.",null,null],[13,"TermUnset","","TermUnset Indicates that the environment doesn't include enough information to find\nthe terminfo entry.",2,null],[13,"MalformedTerminfo","","MalformedTerminfo indicates that parsing the terminfo entry failed.",2,null],[13,"IoError","","io::Error forwards any io::Errors encountered when finding or reading the terminfo entry.",2,null],[0,"searcher","","ncurses-compatible database discovery",null,null],[5,"get_dbpath_for_term","term::terminfo::searcher","Return path to database entry for `term`",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[0,"parser","term::terminfo","TermInfo format parsing.\nncurses-compatible compiled terminfo format parsing (term(5))",null,null],[0,"compiled","term::terminfo::parser","ncurses-compatible compiled terminfo format parsing (term(5))",null,null],[5,"parse","term::terminfo::parser::compiled","Parse a compiled terminfo entry, using long capability names if `longnames`\nis true",null,{"inputs":[{"name":"read"},{"name":"bool"}],"output":{"name":"result"}}],[5,"msys_terminfo","","Create a dummy TermInfo struct for msys terminals",null,{"inputs":[],"output":{"name":"terminfo"}}],[7,"boolfnames","","",null,null],[7,"boolnames","","",null,null],[7,"numfnames","","",null,null],[7,"numnames","","",null,null],[7,"stringfnames","","",null,null],[7,"stringnames","","",null,null],[0,"parm","term::terminfo","Parameterized string expansion",null,null],[3,"Variables","term::terminfo::parm","Container for static and dynamic variable arrays",null,null],[4,"Param","","Types of parameters a capability can use",null,null],[13,"Words","","",3,null],[13,"Number","","",3,null],[5,"expand","","Expand a parameterized capability",null,null],[11,"clone","","",3,{"inputs":[{"name":"param"}],"output":{"name":"param"}}],[11,"new","","Return a new zero-initialized Variables",4,{"inputs":[{"name":"variables"}],"output":{"name":"variables"}}],[11,"fmt","term::terminfo","",1,{"inputs":[{"name":"terminfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",2,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",2,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_env","","Create a TermInfo based on current environment.",1,{"inputs":[{"name":"terminfo"}],"output":{"name":"result"}}],[11,"from_name","","Create a TermInfo for the named terminal.",1,{"inputs":[{"name":"terminfo"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_path","","Parse the given TermInfo.",1,{"inputs":[{"name":"terminfo"},{"name":"path"}],"output":{"name":"result"}}],[11,"fg","","",5,{"inputs":[{"name":"terminfoterminal"},{"name":"color"}],"output":{"name":"result"}}],[11,"bg","","",5,{"inputs":[{"name":"terminfoterminal"},{"name":"color"}],"output":{"name":"result"}}],[11,"attr","","",5,{"inputs":[{"name":"terminfoterminal"},{"name":"attr"}],"output":{"name":"result"}}],[11,"supports_attr","","",5,{"inputs":[{"name":"terminfoterminal"},{"name":"attr"}],"output":{"name":"bool"}}],[11,"reset","","",5,{"inputs":[{"name":"terminfoterminal"}],"output":{"name":"result"}}],[11,"cursor_up","","",5,{"inputs":[{"name":"terminfoterminal"}],"output":{"name":"result"}}],[11,"delete_line","","",5,{"inputs":[{"name":"terminfoterminal"}],"output":{"name":"result"}}],[11,"carriage_return","","",5,{"inputs":[{"name":"terminfoterminal"}],"output":{"name":"result"}}],[11,"get_ref","","",5,{"inputs":[{"name":"terminfoterminal"}],"output":{"name":"t"}}],[11,"get_mut","","",5,{"inputs":[{"name":"terminfoterminal"}],"output":{"name":"t"}}],[11,"into_inner","","",5,{"inputs":[{"name":"terminfoterminal"}],"output":{"name":"t"}}],[11,"new_with_terminfo","","Create a new TerminfoTerminal with the given TermInfo and Write.",5,{"inputs":[{"name":"terminfoterminal"},{"name":"t"},{"name":"terminfo"}],"output":{"name":"terminfoterminal"}}],[11,"new","","Create a new TerminfoTerminal for the current environment with the given Write.",5,{"inputs":[{"name":"terminfoterminal"},{"name":"t"}],"output":{"name":"option"}}],[11,"write","","",5,null],[11,"flush","","",5,{"inputs":[{"name":"terminfoterminal"}],"output":{"name":"result"}}],[0,"color","term","Terminal color definitions",null,null],[6,"Color","term::color","Number for a terminal color",null,null],[17,"BLACK","","",null,null],[17,"RED","","",null,null],[17,"GREEN","","",null,null],[17,"YELLOW","","",null,null],[17,"BLUE","","",null,null],[17,"MAGENTA","","",null,null],[17,"CYAN","","",null,null],[17,"WHITE","","",null,null],[17,"BRIGHT_BLACK","","",null,null],[17,"BRIGHT_RED","","",null,null],[17,"BRIGHT_GREEN","","",null,null],[17,"BRIGHT_YELLOW","","",null,null],[17,"BRIGHT_BLUE","","",null,null],[17,"BRIGHT_MAGENTA","","",null,null],[17,"BRIGHT_CYAN","","",null,null],[17,"BRIGHT_WHITE","","",null,null],[6,"StdoutTerminal","term","Alias for stdout terminals.",null,null],[6,"StderrTerminal","","Alias for stderr terminals.",null,null],[8,"Terminal","","A terminal with similar capabilities to an ANSI Terminal\n(foreground/background colors etc).",null,null],[16,"Output","","The terminal's output writer type.",6,null],[10,"fg","","Sets the foreground color to the given color.",6,{"inputs":[{"name":"terminal"},{"name":"color"}],"output":{"name":"result"}}],[10,"bg","","Sets the background color to the given color.",6,{"inputs":[{"name":"terminal"},{"name":"color"}],"output":{"name":"result"}}],[10,"attr","","Sets the given terminal attribute, if supported.  Returns `Ok(true)`\nif the attribute was supported, `Ok(false)` otherwise, and `Err(e)` if\nthere was an I/O error.",6,{"inputs":[{"name":"terminal"},{"name":"attr"}],"output":{"name":"result"}}],[10,"supports_attr","","Returns whether the given terminal attribute is supported.",6,{"inputs":[{"name":"terminal"},{"name":"attr"}],"output":{"name":"bool"}}],[10,"reset","","Resets all terminal attributes and colors to their defaults.",6,{"inputs":[{"name":"terminal"}],"output":{"name":"result"}}],[10,"cursor_up","","Moves the cursor up one line.",6,{"inputs":[{"name":"terminal"}],"output":{"name":"result"}}],[10,"delete_line","","Deletes the text from the cursor location to the end of the line.",6,{"inputs":[{"name":"terminal"}],"output":{"name":"result"}}],[10,"carriage_return","","Moves the cursor to the left edge of the current line.",6,{"inputs":[{"name":"terminal"}],"output":{"name":"result"}}],[10,"get_ref","","Gets an immutable reference to the stream inside",6,{"inputs":[{"name":"terminal"}],"output":{"name":"output"}}],[10,"get_mut","","Gets a mutable reference to the stream inside",6,{"inputs":[{"name":"terminal"}],"output":{"name":"output"}}],[10,"into_inner","","Returns the contained stream, destroying the `Terminal`",6,{"inputs":[{"name":"terminal"}],"output":{"name":"output"}}],[11,"clone","","",0,{"inputs":[{"name":"attr"}],"output":{"name":"attr"}}],[11,"eq","","",0,{"inputs":[{"name":"attr"},{"name":"attr"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"attr"},{"name":"attr"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"attr"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[4,"Attr"],[3,"TermInfo"],[4,"Error"],[4,"Param"],[3,"Variables"],[3,"TerminfoTerminal"],[8,"Terminal"]]};
searchIndex['kernel32'] = {"items":[],"paths":[]};
searchIndex['winapi'] = {"items":[],"paths":[]};
searchIndex['ansi_term'] = {"items":[[0,"","ansi_term","This is a library for controlling colours and formatting, such as\nred bold text or blue underlined text, on ANSI terminals.",null,null],[3,"ANSIString","","An ANSI String is a string coupled with the Style to display it\nin a terminal.",null,null],[3,"Style","","A style is a collection of properties that can format a string\nusing ANSI escape codes.",null,null],[3,"ANSIStrings","","A set of `ANSIString`s collected together, in order to be written with a\nminimum of control characters.",null,null],[4,"Colour","","A colour is one specific type of ANSI escape code, and can refer\nto either the foreground or background colour.",null,null],[13,"Black","","",0,null],[13,"Red","","",0,null],[13,"Green","","",0,null],[13,"Yellow","","",0,null],[13,"Blue","","",0,null],[13,"Purple","","",0,null],[13,"Cyan","","",0,null],[13,"White","","",0,null],[13,"Fixed","","",0,null],[11,"clone","","",1,{"inputs":[{"name":"ansistring"}],"output":{"name":"ansistring"}}],[11,"fmt","","",1,{"inputs":[{"name":"ansistring"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"ansistring"},{"name":"ansistring"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"ansistring"},{"name":"ansistring"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"ansistring"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",1,{"inputs":[{"name":"ansistring"},{"name":"s"}],"output":{"name":"ansistring"}}],[11,"fmt","","",0,{"inputs":[{"name":"colour"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"colour"}],"output":{"name":"colour"}}],[11,"eq","","",0,{"inputs":[{"name":"colour"},{"name":"colour"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"colour"},{"name":"colour"}],"output":{"name":"bool"}}],[11,"normal","","Return a Style with the foreground colour set to this colour.",0,{"inputs":[{"name":"colour"}],"output":{"name":"style"}}],[11,"paint","","Paints the given text with this colour, returning an ANSI string.\nThis is a short-cut so you don't have to use Blue.normal() just\nto get blue text.",0,{"inputs":[{"name":"colour"},{"name":"s"}],"output":{"name":"ansistring"}}],[11,"bold","","Returns a Style with the bold property set.",0,{"inputs":[{"name":"colour"}],"output":{"name":"style"}}],[11,"dimmed","","Returns a Style with the dimmed property set.",0,{"inputs":[{"name":"colour"}],"output":{"name":"style"}}],[11,"italic","","Returns a Style with the italic property set.",0,{"inputs":[{"name":"colour"}],"output":{"name":"style"}}],[11,"underline","","Returns a Style with the underline property set.",0,{"inputs":[{"name":"colour"}],"output":{"name":"style"}}],[11,"blink","","Returns a Style with the blink property set.",0,{"inputs":[{"name":"colour"}],"output":{"name":"style"}}],[11,"reverse","","Returns a Style with the reverse property set.",0,{"inputs":[{"name":"colour"}],"output":{"name":"style"}}],[11,"hidden","","Returns a Style with the hidden property set.",0,{"inputs":[{"name":"colour"}],"output":{"name":"style"}}],[11,"on","","Returns a Style with the background colour property set.",0,{"inputs":[{"name":"colour"},{"name":"colour"}],"output":{"name":"style"}}],[11,"fmt","","",2,{"inputs":[{"name":"style"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"style"}],"output":{"name":"style"}}],[11,"eq","","",2,{"inputs":[{"name":"style"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"style"},{"name":"style"}],"output":{"name":"bool"}}],[11,"new","","Creates a new Style with no differences.",2,{"inputs":[{"name":"style"}],"output":{"name":"style"}}],[11,"paint","","Paints the given text with this colour, returning an ANSI string.",2,{"inputs":[{"name":"style"},{"name":"s"}],"output":{"name":"ansistring"}}],[11,"bold","","Returns a Style with the bold property set.",2,{"inputs":[{"name":"style"}],"output":{"name":"style"}}],[11,"dimmed","","Returns a Style with the dimmed property set.",2,{"inputs":[{"name":"style"}],"output":{"name":"style"}}],[11,"italic","","Returns a Style with the italic property set.",2,{"inputs":[{"name":"style"}],"output":{"name":"style"}}],[11,"underline","","Returns a Style with the underline property set.",2,{"inputs":[{"name":"style"}],"output":{"name":"style"}}],[11,"blink","","Returns a Style with the blink property set.",2,{"inputs":[{"name":"style"}],"output":{"name":"style"}}],[11,"reverse","","Returns a Style with the reverse property set.",2,{"inputs":[{"name":"style"}],"output":{"name":"style"}}],[11,"hidden","","Returns a Style with the hidden property set.",2,{"inputs":[{"name":"style"}],"output":{"name":"style"}}],[11,"on","","Returns a Style with the background colour property set.",2,{"inputs":[{"name":"style"},{"name":"colour"}],"output":{"name":"style"}}],[11,"default","","",2,{"inputs":[{"name":"style"}],"output":{"name":"style"}}],[11,"fmt","","",3,{"inputs":[{"name":"ansistrings"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[4,"Colour"],[3,"ANSIString"],[3,"Style"],[3,"ANSIStrings"]]};
initSearch(searchIndex);
